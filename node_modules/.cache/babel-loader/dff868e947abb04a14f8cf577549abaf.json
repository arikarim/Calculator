{"ast":null,"code":"import Big from 'big.js';\nlet result = Infinity;\n\nconst Operate = (numberOne = null, numberTwo = null, operation) => {\n  const operations = ['+', '-', 'X', '/', '%'];\n\n  if (operations.includes(operation)) {\n    if (operation === '+') {\n      result = new Big(numberOne).plus(new Big(numberTwo));\n    } else if (operation === '-') {\n      result = new Big(numberOne).minus(new Big(numberTwo));\n    } else if (operation === 'X') {\n      result = new Big(numberOne).times(new Big(numberTwo));\n    } else if (operation === '/') {\n      try {\n        result = new Big(numberOne).div(new Big(numberTwo));\n      } catch (error) {\n        return 'Infinity';\n      }\n    } else if (operation === '%') {\n      if (numberOne) {\n        result = new Big(numberOne).div(100);\n      } else {\n        result = new Big(numberTwo).div(100);\n      }\n    }\n  }\n\n  return result.toString();\n};\n\n_c = Operate;\nexport default Operate;\n\nvar _c;\n\n$RefreshReg$(_c, \"Operate\");","map":{"version":3,"sources":["/home/ari/Calculator/Calculator/src/logic/Operate.js"],"names":["Big","result","Infinity","Operate","numberOne","numberTwo","operation","operations","includes","plus","minus","times","div","error","toString"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,QAAhB;AAEA,IAAIC,MAAM,GAAGC,QAAb;;AAEA,MAAMC,OAAO,GAAG,CAACC,SAAS,GAAG,IAAb,EAAmBC,SAAS,GAAG,IAA/B,EAAqCC,SAArC,KAAmD;AACjE,QAAMC,UAAU,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,CAAnB;;AACA,MAAIA,UAAU,CAACC,QAAX,CAAoBF,SAApB,CAAJ,EAAoC;AAClC,QAAIA,SAAS,KAAK,GAAlB,EAAuB;AACrBL,MAAAA,MAAM,GAAG,IAAID,GAAJ,CAAQI,SAAR,EAAmBK,IAAnB,CAAwB,IAAIT,GAAJ,CAAQK,SAAR,CAAxB,CAAT;AACD,KAFD,MAEO,IAAIC,SAAS,KAAK,GAAlB,EAAuB;AAC5BL,MAAAA,MAAM,GAAG,IAAID,GAAJ,CAAQI,SAAR,EAAmBM,KAAnB,CAAyB,IAAIV,GAAJ,CAAQK,SAAR,CAAzB,CAAT;AACD,KAFM,MAEA,IAAIC,SAAS,KAAK,GAAlB,EAAuB;AAC5BL,MAAAA,MAAM,GAAG,IAAID,GAAJ,CAAQI,SAAR,EAAmBO,KAAnB,CAAyB,IAAIX,GAAJ,CAAQK,SAAR,CAAzB,CAAT;AACD,KAFM,MAEA,IAAIC,SAAS,KAAK,GAAlB,EAAuB;AAC5B,UAAI;AACFL,QAAAA,MAAM,GAAG,IAAID,GAAJ,CAAQI,SAAR,EAAmBQ,GAAnB,CAAuB,IAAIZ,GAAJ,CAAQK,SAAR,CAAvB,CAAT;AACD,OAFD,CAEE,OAAOQ,KAAP,EAAc;AACd,eAAO,UAAP;AACD;AACF,KANM,MAMA,IAAIP,SAAS,KAAK,GAAlB,EAAuB;AAC5B,UAAIF,SAAJ,EAAe;AACbH,QAAAA,MAAM,GAAG,IAAID,GAAJ,CAAQI,SAAR,EAAmBQ,GAAnB,CAAuB,GAAvB,CAAT;AACD,OAFD,MAEO;AACLX,QAAAA,MAAM,GAAG,IAAID,GAAJ,CAAQK,SAAR,EAAmBO,GAAnB,CAAuB,GAAvB,CAAT;AACD;AACF;AACF;;AACD,SAAOX,MAAM,CAACa,QAAP,EAAP;AACD,CAxBD;;KAAMX,O;AA0BN,eAAeA,OAAf","sourcesContent":["import Big from 'big.js';\n\nlet result = Infinity;\n\nconst Operate = (numberOne = null, numberTwo = null, operation) => {\n  const operations = ['+', '-', 'X', '/', '%'];\n  if (operations.includes(operation)) {\n    if (operation === '+') {\n      result = new Big(numberOne).plus(new Big(numberTwo));\n    } else if (operation === '-') {\n      result = new Big(numberOne).minus(new Big(numberTwo));\n    } else if (operation === 'X') {\n      result = new Big(numberOne).times(new Big(numberTwo));\n    } else if (operation === '/') {\n      try {\n        result = new Big(numberOne).div(new Big(numberTwo));\n      } catch (error) {\n        return 'Infinity';\n      }\n    } else if (operation === '%') {\n      if (numberOne) {\n        result = new Big(numberOne).div(100);\n      } else {\n        result = new Big(numberTwo).div(100);\n      }\n    }\n  }\n  return result.toString();\n};\n\nexport default Operate;\n"]},"metadata":{},"sourceType":"module"}